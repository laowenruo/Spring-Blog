<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mashiro.mapper.CommentMapper">

    <resultMap id="comment" type="cn.isbut.entity.Comment">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="content" column="content"/>
        <result property="avatar" column="avatar"/>
        <result property="createTime" column="create_time"/>
        <result property="ip" column="ip"/>
        <result property="published" column="is_published"/>
        <result property="adminComment" column="is_admin_comment"/>
        <result property="page" column="page"/>
        <result property="notice" column="is_notice"/>
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="qq" column="qq"/>
        <association property="blog" javaType="cn.isbut.vo.BlogIdAndTitleVO">
            <id property="id" column="blog_id"/>
            <result property="title" column="title"/>
        </association>
    </resultMap>

    <resultMap id="pageComment" type="cn.isbut.vo.PageCommentVO">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="content" column="content"/>
        <result property="avatar" column="avatar"/>
        <result property="createTime" column="create_time"/>
        <result property="adminComment" column="is_admin_comment"/>
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="parentCommentNickname" column="parent_comment_nickname"/>
    </resultMap>

    <!--保存评论-->
    <insert id="saveComment" useGeneratedKeys="true" keyProperty="id">
        insert into tb_comment (nickname, email, content, avatar, create_time, ip, is_published, is_admin_comment,
                             page, is_notice, parent_comment_id, blog_id, qq)
        values (#{nickname}, #{email}, #{content}, #{avatar}, #{createTime}, #{ip}, #{published}, #{adminComment},
                #{page}, #{notice}, #{parentCommentId}, #{blogId}, #{qq})
    </insert>

    <!--通过评论Id删除评论-->
    <delete id="deleteCommentById">
        delete from tb_comment where id = #{commentId};
    </delete>

    <!--按博客id删除博客下所有评论-->
    <delete id="deleteCommentsByBlogId">
        delete from tb_comment where blog_id=#{blogId}
    </delete>

    <!--更新评论-->
    <update id="updateComment">
        update tb_comment set nickname=#{nickname}, avatar=#{avatar}, email=#{email}, ip=#{ip}, content=#{content}
        where id=#{id}
    </update>

    <!--更新评论公开状态-->
    <update id="updateCommentPublishedById">
        update tb_comment set is_published=#{published} where id=#{commentId}
    </update>

    <!--更新评论接收邮件提醒状态-->
    <update id="updateCommentNoticeById">
        update tb_comment set is_notice=#{notice} where id=#{commentId}
    </update>

    <!--按id查询评论-->
    <select id="getCommentById" resultMap="comment">
        select c.id, c.nickname, c.email, c.content, c.avatar, c.create_time, c.ip, c.is_published, c.is_admin_comment, c.page,
               c.is_notice, c.parent_comment_id, c.qq, c.blog_id, b.title
        from tb_comment as c left join tb_blog as b on c.blog_id=b.id
        where c.id=#{id}
    </select>

    <!--按页面和父评论id查询评论List-->
    <select id="getListByPageAndParentCommentId" resultMap="comment">
        select c.id, c.nickname, c.email, c.content, c.avatar, c.create_time, c.ip, c.is_published, c.is_admin_comment, c.page,
        c.is_notice, c.parent_comment_id, c.blog_id, c.qq, b.title
        from tb_comment as c left join tb_blog as b on c.blog_id=b.id
        <where>
            <if test="page!=null">
                c.page=#{page}
            </if>
            <if test="page==0 and blogId!=null">
                and c.blog_id=#{blogId}
            </if>
            and c.parent_comment_id=#{parentCommentId}
        </where>
    </select>

    <!--按父评论id查询评论List-->
    <select id="getListByParentCommentId" resultMap="comment">
        select c.id, c.nickname, c.email, c.content, c.avatar, c.create_time, c.ip, c.is_published, c.is_admin_comment, c.page,
               c.is_notice, c.parent_comment_id, c.qq, c.blog_id, b.title
        from tb_comment as c left join tb_blog as b on c.blog_id=b.id
        where c.parent_comment_id=#{parentCommentId}
    </select>
    <select id="getReplyListByParentCommentId" resultType="cn.isbut.vo.PageCommentVO" resultMap="pageComment">
        select c1.id, c1.nickname, c1.content, c1.avatar, c1.create_time, c1.is_admin_comment,
        c1.parent_comment_id as parent_comment_id, c2.nickname as parent_comment_nickname
        from tb_comment as c1 left join tb_comment as c2 on c1.parent_comment_id=c2.id
        where c1.parent_comment_id=#{parentCommentId}
        and c1.is_published=true
        order by c1.create_time desc
    </select>

    <!--查询页面展示的评论List-->
    <select id="getPageCommentListByPageAndParentCommentId" resultMap="pageComment">
        select c1.id, c1.nickname, c1.content, c1.avatar, c1.create_time, c1.is_admin_comment,
        c1.parent_comment_id as parent_comment_id, c2.nickname as parent_comment_nickname
        from tb_comment as c1 left join tb_comment as c2 on c1.parent_comment_id=c2.id
        where c1.page=#{page}
        <if test="page==0 and blogId!=null">
            and c1.blog_id=#{blogId}
        </if>
        and c1.parent_comment_id=#{parentCommentId}
        and c1.is_published=true
        order by c1.create_time desc
    </select>

    <!--获取总评论数目-->
    <select id="countComment" resultType="java.lang.Integer">
        select count(id) from tb_comment
    </select>

    <!--按页面查询评论数量-->
    <select id="countByPageAndIsPublished" resultType="java.lang.Integer">
        select count(*) from tb_comment
        where page=#{page}
        <if test="page==0 and blogId!=0">
            and blog_id=#{blogId}
        </if>
    </select>

</mapper>
